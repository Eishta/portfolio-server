{
    "feed": {
        "url": "https://medium.com/feed/@eishta",
        "title": "Stories by Eishta Mittal on Medium",
        "link": "https://medium.com/@eishta?source=rss-f300f3a4fbe7------2",
        "author": "",
        "description": "Stories by Eishta Mittal on Medium",
        "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*jh5RCdZX2axINhPieKVosg.jpeg"
    },
    "items": [
        {
            "title": "How JS works behind the scenes?",
            "pubDate": "2022-03-27 12:54:24",
            "link": "https://eishta.medium.com/how-js-works-behind-the-scenes-a67cdc8592ab?source=rss-f300f3a4fbe7------2",
            "guid": "https://medium.com/p/a67cdc8592ab",
            "author": "Eishta Mittal",
            "thumbnail": "https://cdn-images-1.medium.com/max/711/0*1J4mBRkpHc_ejMVt.jpg",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/711/0*1J4mBRkpHc_ejMVt.jpg\"></figure><p>The web browser doesn’t understand the high-level JS code itself . The code needs to get converted to the machine code before the browser and the computer can understand it.</p>\n<p>When parsing through the HTML, if the browser sees some JS code or an event like onClick occurs (that contains some JS code to be executed), the browser sends this code to the JS engine.</p>\n<blockquote>\n<strong>JS Engine</strong> — It is basically a program that converts the JS code to Binary code that the CPU can understand. Examples include the <a href=\"https://v8.dev/\">V8 engine</a> for Google chrome, <a href=\"https://firefox-source-docs.mozilla.org/js/index.html\">SpiderMonkey </a>for Firefox, and <a href=\"https://en.wikipedia.org/wiki/Chakra_(JScript_engine)\">Chakra</a> for Internet Explorer.</blockquote>\n<p>The JS Engine creates an environment for the Javascript code to be transformed into binary and then executed. This environment is called the <strong>Execution Context</strong>. Each and every line of Javascript code will run inside this environment.</p>\n<p>There are 3 types of Execution context:-</p>\n<ol>\n<li>Global</li>\n<li>Functional</li>\n<li>Eval</li>\n</ol>\n<h4>Global Execution Context (GEC):</h4>\n<p>Global execution context performs 2 things,</p>\n<ol>\n<li>It will create a global object which is “window” for browser and “global” for nodeJS.</li>\n<li>Set ‘this’ property which is related to ‘window’ object by default.</li>\n</ol>\n<p>JS engine is a single threaded, so only one global context is possible.</p>\n<h4><strong>Functional Execution Context(FEC):</strong></h4>\n<p>While executing the global execution context’s code, if JS engine finds a function call, then it create a new functional execution context for that function within the GEC. Each function has its own execution context. It has access to all variables which global execution context has but not vice versa.</p>\n<h4><strong>Eval:</strong></h4>\n<p>Execution context inside a eval function. But, eval function is not recommended to use.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*P6sRKY_-NtzirXWl.png\"></figure><p>During the Execution Context run-time, the specific code gets parsed by a parser, the variables and functions are stored in memory, executable byte-code gets generated, and the code gets executed.</p>\n<p>The creation of an Execution Context (GEC or FEC) happens in two phases:</p>\n<ol>\n<li>Creation Phase</li>\n<li>Execution Phase</li>\n</ol>\n<h3>Creation Phase:</h3>\n<h4>1. Creation Of The Variable Object (VO)</h4>\n<p>The Variable Object (VO) is an object-like container created within an Execution Context. It stores the variables and function declarations defined within that Execution Context.</p>\n<p>The FEC, on the other hand, does not construct a VO. Rather, it generates an array-like object called the ‘argument’ object, which includes all of the arguments supplied to the function.</p>\n<p>This process of storing variables and function declaration in memory prior to the execution of the code is known as <strong>Hoisting</strong>.</p>\n<p>Hoisting only works for function declarations, not expressions and only var variables.</p>\n<h4>2. Creation Phase: Creation of The Scope Chain</h4>\n<p>Each Function Execution Context creates its scope: the space/environment where the variables and functions it defined can be accessed via a process called Scoping.</p>\n<p>Only when the JS engine can’t resolve a variable within the scope chain does it stop executing and throws an error.</p>\n<h4>3. Creation Phase: Setting The Value of The “this” Keyword</h4>\n<p>The JavaScript this keyword refers to the scope where an Execution Context belongs.</p>\n<p>Once the scope chain is created, the value of 'this' is initialized by the JS engine.</p>\n<p>In the GEC (outside of any function and object), this refers to the global object — which is the window object. In the case of the FEC, it doesn’t create the this object. Rather, it get's access to that of the environment it is defined in.</p>\n<h3>The Execution Phase</h3>\n<p>This is where the actual execution begins.</p>\n<p>At this stage, the JavaScript engine reads the code in the current Execution Context once more, then updates the VO with the actual values of these variables. Then the code is parsed by a parser, gets transformed to executable byte code, and finally gets executed.</p>\n<h3>JavaScript Execution Stack</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YC3SEsa-9MbrWd1zqpXvwg.png\"></figure><p>The Execution Stack, also known as the <strong>Call Stack</strong>, keeps track of all the Execution Contexts created during the life cycle of a script.</p>\n<p>As JS is a single-threaded language, whenever a new event or a function call occurs, a new Execution Context is created for each of these events. Due to the single-threaded nature of JavaScript, a stack of piled-up execution contexts to be executed is created, known as the Execution Stack.</p>\n<p>When scripts load in the browser, the Global context is created as the default context where the JS engine starts executing code and is placed at the bottom of the execution stack.</p>\n<p>When a function call occurs, its EC is created and pushed to the stack as active EC. Once the active EC is done executing, it is popped out of stack and the code starts executing from point it left after the function call.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a67cdc8592ab\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/711/0*1J4mBRkpHc_ejMVt.jpg\"></figure><p>The web browser doesn’t understand the high-level JS code itself . The code needs to get converted to the machine code before the browser and the computer can understand it.</p>\n<p>When parsing through the HTML, if the browser sees some JS code or an event like onClick occurs (that contains some JS code to be executed), the browser sends this code to the JS engine.</p>\n<blockquote>\n<strong>JS Engine</strong> — It is basically a program that converts the JS code to Binary code that the CPU can understand. Examples include the <a href=\"https://v8.dev/\">V8 engine</a> for Google chrome, <a href=\"https://firefox-source-docs.mozilla.org/js/index.html\">SpiderMonkey </a>for Firefox, and <a href=\"https://en.wikipedia.org/wiki/Chakra_(JScript_engine)\">Chakra</a> for Internet Explorer.</blockquote>\n<p>The JS Engine creates an environment for the Javascript code to be transformed into binary and then executed. This environment is called the <strong>Execution Context</strong>. Each and every line of Javascript code will run inside this environment.</p>\n<p>There are 3 types of Execution context:-</p>\n<ol>\n<li>Global</li>\n<li>Functional</li>\n<li>Eval</li>\n</ol>\n<h4>Global Execution Context (GEC):</h4>\n<p>Global execution context performs 2 things,</p>\n<ol>\n<li>It will create a global object which is “window” for browser and “global” for nodeJS.</li>\n<li>Set ‘this’ property which is related to ‘window’ object by default.</li>\n</ol>\n<p>JS engine is a single threaded, so only one global context is possible.</p>\n<h4><strong>Functional Execution Context(FEC):</strong></h4>\n<p>While executing the global execution context’s code, if JS engine finds a function call, then it create a new functional execution context for that function within the GEC. Each function has its own execution context. It has access to all variables which global execution context has but not vice versa.</p>\n<h4><strong>Eval:</strong></h4>\n<p>Execution context inside a eval function. But, eval function is not recommended to use.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*P6sRKY_-NtzirXWl.png\"></figure><p>During the Execution Context run-time, the specific code gets parsed by a parser, the variables and functions are stored in memory, executable byte-code gets generated, and the code gets executed.</p>\n<p>The creation of an Execution Context (GEC or FEC) happens in two phases:</p>\n<ol>\n<li>Creation Phase</li>\n<li>Execution Phase</li>\n</ol>\n<h3>Creation Phase:</h3>\n<h4>1. Creation Of The Variable Object (VO)</h4>\n<p>The Variable Object (VO) is an object-like container created within an Execution Context. It stores the variables and function declarations defined within that Execution Context.</p>\n<p>The FEC, on the other hand, does not construct a VO. Rather, it generates an array-like object called the ‘argument’ object, which includes all of the arguments supplied to the function.</p>\n<p>This process of storing variables and function declaration in memory prior to the execution of the code is known as <strong>Hoisting</strong>.</p>\n<p>Hoisting only works for function declarations, not expressions and only var variables.</p>\n<h4>2. Creation Phase: Creation of The Scope Chain</h4>\n<p>Each Function Execution Context creates its scope: the space/environment where the variables and functions it defined can be accessed via a process called Scoping.</p>\n<p>Only when the JS engine can’t resolve a variable within the scope chain does it stop executing and throws an error.</p>\n<h4>3. Creation Phase: Setting The Value of The “this” Keyword</h4>\n<p>The JavaScript this keyword refers to the scope where an Execution Context belongs.</p>\n<p>Once the scope chain is created, the value of 'this' is initialized by the JS engine.</p>\n<p>In the GEC (outside of any function and object), this refers to the global object — which is the window object. In the case of the FEC, it doesn’t create the this object. Rather, it get's access to that of the environment it is defined in.</p>\n<h3>The Execution Phase</h3>\n<p>This is where the actual execution begins.</p>\n<p>At this stage, the JavaScript engine reads the code in the current Execution Context once more, then updates the VO with the actual values of these variables. Then the code is parsed by a parser, gets transformed to executable byte code, and finally gets executed.</p>\n<h3>JavaScript Execution Stack</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YC3SEsa-9MbrWd1zqpXvwg.png\"></figure><p>The Execution Stack, also known as the <strong>Call Stack</strong>, keeps track of all the Execution Contexts created during the life cycle of a script.</p>\n<p>As JS is a single-threaded language, whenever a new event or a function call occurs, a new Execution Context is created for each of these events. Due to the single-threaded nature of JavaScript, a stack of piled-up execution contexts to be executed is created, known as the Execution Stack.</p>\n<p>When scripts load in the browser, the Global context is created as the default context where the JS engine starts executing code and is placed at the bottom of the execution stack.</p>\n<p>When a function call occurs, its EC is created and pushed to the stack as active EC. Once the active EC is done executing, it is popped out of stack and the code starts executing from point it left after the function call.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a67cdc8592ab\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "javascript-engine",
                "call-stack",
                "working-of-js-engine",
                "execution-context",
                "javascript"
            ]
        },
        {
            "title": "Javascript Features",
            "pubDate": "2022-03-26 16:54:32",
            "link": "https://eishta.medium.com/javascript-features-2c35ad98510e?source=rss-f300f3a4fbe7------2",
            "guid": "https://medium.com/p/2c35ad98510e",
            "author": "Eishta Mittal",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*_-UVvPhJnTGNuRG1rBZjMw.png",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_-UVvPhJnTGNuRG1rBZjMw.png\"></figure><h3>Features</h3>\n<ol>\n<li>High-level</li>\n<li>Garbage-collected</li>\n<li>Interpreted and Just-in-time compilation</li>\n<li>Multi-paradigm</li>\n<li>Prototype based object oriented</li>\n<li>First class functions</li>\n<li>Dynamic</li>\n<li>Single-threaded</li>\n</ol>\n<h3>HIGH-LEVEL</h3>\n<ul>\n<li>Languages that need not worry about the resources management such as memory.</li>\n<li>They allow the programmer to focus on what needs to be done, rather than on how the computer actually works.</li>\n<li>\n<strong>Low-level language</strong> — example- C-&gt; where memory is to be handled manually.</li>\n</ul>\n<h3>Garbage-collected</h3>\n<ul>\n<li>JavaScript utilises a form of automatic memory management known as garbage collection (GC).</li>\n<li>V8 Engine internally uses <a href=\"https://www.geeksforgeeks.org/mark-and-sweep-garbage-collection-algorithm/\">Mark and Sweep Algorithm</a> to free up space from the memory heap.</li>\n<li>The garbage collector <strong>attempts to reclaim memory which was allocated by the program, but is no longer referenced</strong> — also called garbage.</li>\n<li>JS Engine automatically removes the unused variables and things</li>\n</ul>\n<h3>Interpreted and Just-in-time compilation</h3>\n<ul>\n<li>The V8 engine uses both a compiler and an interpreter and follows <strong>Just in Time(JIT) Compilation</strong> for improved performance.</li>\n<li>The V8 engine initially uses an interpreter, to interpret the code. On further executions, the V8 engine finds patterns such as frequently executed functions, frequently used variables, and compiles them to improve performance.</li>\n<li>Suppose the performance degrades or the parameters passed to the function change their type, then the V8 simply decompiles the compiled code and falls back to the interpreter.</li>\n</ul>\n<h3>Multi-paradigm</h3>\n<ul><li>JS is based on multiple paradigms such as :-<br>1. Procedural<br>2. OOPS<br>3. Functional Programming</li></ul>\n<h3>Prototype based object oriented</h3>\n<ul>\n<li>In Js, everything except primitives(number, string etc) are objects.</li>\n<li>Every object in <strong>JavaScript has a built-in property</strong>, which is called its prototype. The prototype is itself an object, so the prototype will have its own prototype, making what’s called a prototype chain.</li>\n</ul>\n<h3>First class functions</h3>\n<ul><li>First-Class Function: A programming language is said to have First-class functions <strong>if functions in that language are treated like other variables</strong>. So the functions can be assigned to any other variable or passed as an argument or can be returned by another function.</li></ul>\n<h3>Dynamic</h3>\n<ul>\n<li>\n<strong>When you declare a variable, you do not need to specify what type this variable is</strong>. Javascript engine infers what type this variable is based on the value assigned to at run time.</li>\n<li>The variables don’t have the datatype and the data type can be changed at runtime.</li>\n</ul>\n<h3>Single-threaded</h3>\n<ul>\n<li>JS runs on a single thread and handles multiple operations with single thread only.</li>\n<li>Javascript is a single threaded language. This means it has one call stack and one memory heap. As expected, it executes code in order and must finish executing a piece code before moving onto the next</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2c35ad98510e\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_-UVvPhJnTGNuRG1rBZjMw.png\"></figure><h3>Features</h3>\n<ol>\n<li>High-level</li>\n<li>Garbage-collected</li>\n<li>Interpreted and Just-in-time compilation</li>\n<li>Multi-paradigm</li>\n<li>Prototype based object oriented</li>\n<li>First class functions</li>\n<li>Dynamic</li>\n<li>Single-threaded</li>\n</ol>\n<h3>HIGH-LEVEL</h3>\n<ul>\n<li>Languages that need not worry about the resources management such as memory.</li>\n<li>They allow the programmer to focus on what needs to be done, rather than on how the computer actually works.</li>\n<li>\n<strong>Low-level language</strong> — example- C-&gt; where memory is to be handled manually.</li>\n</ul>\n<h3>Garbage-collected</h3>\n<ul>\n<li>JavaScript utilises a form of automatic memory management known as garbage collection (GC).</li>\n<li>V8 Engine internally uses <a href=\"https://www.geeksforgeeks.org/mark-and-sweep-garbage-collection-algorithm/\">Mark and Sweep Algorithm</a> to free up space from the memory heap.</li>\n<li>The garbage collector <strong>attempts to reclaim memory which was allocated by the program, but is no longer referenced</strong> — also called garbage.</li>\n<li>JS Engine automatically removes the unused variables and things</li>\n</ul>\n<h3>Interpreted and Just-in-time compilation</h3>\n<ul>\n<li>The V8 engine uses both a compiler and an interpreter and follows <strong>Just in Time(JIT) Compilation</strong> for improved performance.</li>\n<li>The V8 engine initially uses an interpreter, to interpret the code. On further executions, the V8 engine finds patterns such as frequently executed functions, frequently used variables, and compiles them to improve performance.</li>\n<li>Suppose the performance degrades or the parameters passed to the function change their type, then the V8 simply decompiles the compiled code and falls back to the interpreter.</li>\n</ul>\n<h3>Multi-paradigm</h3>\n<ul><li>JS is based on multiple paradigms such as :-<br>1. Procedural<br>2. OOPS<br>3. Functional Programming</li></ul>\n<h3>Prototype based object oriented</h3>\n<ul>\n<li>In Js, everything except primitives(number, string etc) are objects.</li>\n<li>Every object in <strong>JavaScript has a built-in property</strong>, which is called its prototype. The prototype is itself an object, so the prototype will have its own prototype, making what’s called a prototype chain.</li>\n</ul>\n<h3>First class functions</h3>\n<ul><li>First-Class Function: A programming language is said to have First-class functions <strong>if functions in that language are treated like other variables</strong>. So the functions can be assigned to any other variable or passed as an argument or can be returned by another function.</li></ul>\n<h3>Dynamic</h3>\n<ul>\n<li>\n<strong>When you declare a variable, you do not need to specify what type this variable is</strong>. Javascript engine infers what type this variable is based on the value assigned to at run time.</li>\n<li>The variables don’t have the datatype and the data type can be changed at runtime.</li>\n</ul>\n<h3>Single-threaded</h3>\n<ul>\n<li>JS runs on a single thread and handles multiple operations with single thread only.</li>\n<li>Javascript is a single threaded language. This means it has one call stack and one memory heap. As expected, it executes code in order and must finish executing a piece code before moving onto the next</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2c35ad98510e\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "prototype",
                "javascript",
                "features",
                "single-threaded-execution",
                "compilation"
            ]
        },
        {
            "title": "How Web Browser Works?",
            "pubDate": "2022-03-26 11:52:19",
            "link": "https://eishta.medium.com/how-web-browser-works-5cd5d1b5c065?source=rss-f300f3a4fbe7------2",
            "guid": "https://medium.com/p/5cd5d1b5c065",
            "author": "Eishta Mittal",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*JDkzl3GqfecOOZmTN0op7A.png",
            "description": "\n<p>Web performance refers to <strong>how quickly site content loads and renders in a web browser, and how well it responds to user interaction</strong>.</p>\n<p>Two major issues in web performance are understanding issues having to do with <strong>latency</strong> and issues having to do with the fact that for the most part, <strong>browsers are single threaded.</strong></p>\n<h3>How a web page get rendered?</h3>\n<h4>1. Navigation</h4>\n<p>It occurs whenever a user requests a page by entering a URL into the address bar, clicking a link, submitting a form, as well as other actions.</p>\n<h4>2. DNS Lookup</h4>\n<p>If you’ve never visited a site, a DNS lookup must happen.</p>\n<p>In DNS, each host name is mapped with an IP address. DNS lookups must be done for each unique hostname the requested page references.</p>\n<p>When the browser requests a DNS lookup, it gets responded with an IP address. After this initial request, the IP will likely be cached for a time, which speeds up subsequent requests.</p>\n<h4>3. TCP Handshake</h4>\n<p>TCP’s three way handshaking technique is often referred to as “SYN-SYN-ACK”. Once the IP address is known, the browser sets up a connection to the server via a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TCP_handshake\">TCP three-way handshake</a>. This mechanism is designed so that the browser and web server can negotiate the parameters of the network TCP socket connection before transmitting data.</p>\n<h4>4. TLS Negotiation</h4>\n<p>This handshake, or rather the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TLS\">TLS</a> negotiation, determines which cipher will be used to encrypt the communication, verifies the server, and establishes that a secure connection is in place before beginning the actual transfer of data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JDkzl3GqfecOOZmTN0op7A.png\"></figure><p>After the 8 round trips, the browser is finally able to make the request.</p>\n<h4>4. Response</h4>\n<p>Once we have an established connection to a web server, the browser sends an initial <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">HTTP </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">GET request</a> on behalf of the user. Once the server receives the request, it will reply with relevant response headers and the contents of the HTML.</p>\n<p>This response for this initial request contains the first byte of data received. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/time_to_first_byte\">Time to First Byte</a> (TTFB) is the time between when the user made the request — say by clicking on a link — and the receipt of this first packet of HTML. The first chunk of content is usually 14kb of data.</p>\n<blockquote>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#tcp_slow_start_14kb_rule\">TCP Slow Start / 14kb rule</a>- The first response packet will be 14Kb. This is part of <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TCP_slow_start\">TCP slow start</a>, an algorithm which balances the speed of a network connection. Slow start gradually increases the amount of data transmitted until the network’s maximum bandwidth can be determined.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*m1-2iLpBgV0BWO22ynHFDQ.png\"></figure><h4>5. Parsing</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parse\">Parsing</a> is the step the browser takes to turn the first chunk of data it receives over the network into the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/DOM\">DOM</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSSOM\">CSSOM</a>, which is used by the renderer to paint a page to the screen.</p>\n<p>It is important for the fist chunk of data(14kb) to include the html and css that the browser needs to render the page, even if the request page’s HTML is larger than the initial 14KB packet.</p>\n<h4>6. Building DOM Tree</h4>\n<p>The <strong>first step</strong> is processing the HTML markup and building the DOM tree.HTML parsing involves <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\">tokenization</a> and tree construction. HTML tokens include start and end tags, as well as attribute names and values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nf_ahouWeX91vCxOYSPdig.png\"></figure><p>When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but &lt;script&gt; tags—particularly those without an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async</a> or defer attribute—block rendering, and pause the parsing of HTML.</p>\n<blockquote>Preload Scanner- building of DOM occupies the main thread. As this happens, the <strong><em>preload scanner</em> </strong>will parse through the content available in the background and request high priority resources like CSS, JavaScript, and web fonts even before the HTML parser reaches requested assets, and they might already be in flight or downloaded.</blockquote>\n<h4>7. Building the CSSOM</h4>\n<p>The <strong>second step</strong> is processing CSS and building the CSSOM tree. The DOM and CSSOM are both trees. They are independent data structures. The browser converts the CSS rules into a map of styles it can understand and work with.</p>\n<h4>\n<strong>8. JavaScript Compilation (Building the </strong>Abstract Syntax Tree<strong>)</strong>\n</h4>\n<p>While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into abstract syntax trees. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.</p>\n<h4>9. Render</h4>\n<p>The <strong>third step</strong> in the critical rendering path is combining the DOM and CSSOM into a render tree.By default the rendering engine can display HTML and XML documents and images. It can display other types of data via plug-ins. Chrome uses Blink as the Rendering Engine.</p>\n<p><strong>Style : </strong>The computed style tree, or render tree, construction starts with the root of the DOM tree, traversing each visible node. The <strong>&lt;head&gt;</strong>, nodes with <strong>display: none</strong> are not included in the render DOM tree but the nodes with visibility: hidden are included as they do take up space.</p>\n<h4>10. Layout</h4>\n<p>The <strong>fourth step</strong> in the critical rendering path is running layout on the render tree to compute the geometry of each node. <em>Layout</em> is the process by which the width, height, and location of all the nodes in the render tree are determined, plus the determination of the size and position of each object on the page. <em>Reflow</em> is any subsequent size and position determination of any part of the page or the entire document.</p>\n<p>The first time the size and position of nodes are determined is called <strong><em>layout</em></strong>. Subsequent recalculations of node size and locations are called <strong><em>reflows</em></strong>. In our example, suppose the initial layout occurs before the image is returned. Since we didn’t declare the size of our image, there will be a reflow once the image size is known.</p>\n<h4>11. Painting</h4>\n<p>The last step in the critical rendering path is painting the individual nodes to the screen, the first occurrence of which is called the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/first_meaningful_paint\">first meaningful paint</a>. In the painting or rasterization phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.</p>\n<p>Painting can break the elements in the layout tree into layers. Promoting content into layers on the GPU (instead of the main thread on the CPU) improves paint and repaint performance. Properties and elements that instantiate a layer, — <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">&lt;video&gt;</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\">&lt;canvas&gt;</a>, element with property<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/opacity\">opacity</a>, a 3D <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\">transform</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\">will-change</a>, and a few others.</p>\n<p>Layers do improve performance, but are expensive when it comes to memory management,</p>\n<p><strong>12. Compositing</strong></p>\n<p>When sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.</p>\n<p>As the page continues to load assets, reflows can happen (recall our example image that arrived late). A reflow sparks a repaint and a re-composite.</p>\n<blockquote>This is a summarised content from <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work\">https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work</a> for self -learning.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5cd5d1b5c065\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>Web performance refers to <strong>how quickly site content loads and renders in a web browser, and how well it responds to user interaction</strong>.</p>\n<p>Two major issues in web performance are understanding issues having to do with <strong>latency</strong> and issues having to do with the fact that for the most part, <strong>browsers are single threaded.</strong></p>\n<h3>How a web page get rendered?</h3>\n<h4>1. Navigation</h4>\n<p>It occurs whenever a user requests a page by entering a URL into the address bar, clicking a link, submitting a form, as well as other actions.</p>\n<h4>2. DNS Lookup</h4>\n<p>If you’ve never visited a site, a DNS lookup must happen.</p>\n<p>In DNS, each host name is mapped with an IP address. DNS lookups must be done for each unique hostname the requested page references.</p>\n<p>When the browser requests a DNS lookup, it gets responded with an IP address. After this initial request, the IP will likely be cached for a time, which speeds up subsequent requests.</p>\n<h4>3. TCP Handshake</h4>\n<p>TCP’s three way handshaking technique is often referred to as “SYN-SYN-ACK”. Once the IP address is known, the browser sets up a connection to the server via a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TCP_handshake\">TCP three-way handshake</a>. This mechanism is designed so that the browser and web server can negotiate the parameters of the network TCP socket connection before transmitting data.</p>\n<h4>4. TLS Negotiation</h4>\n<p>This handshake, or rather the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TLS\">TLS</a> negotiation, determines which cipher will be used to encrypt the communication, verifies the server, and establishes that a secure connection is in place before beginning the actual transfer of data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JDkzl3GqfecOOZmTN0op7A.png\"></figure><p>After the 8 round trips, the browser is finally able to make the request.</p>\n<h4>4. Response</h4>\n<p>Once we have an established connection to a web server, the browser sends an initial <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">HTTP </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">GET request</a> on behalf of the user. Once the server receives the request, it will reply with relevant response headers and the contents of the HTML.</p>\n<p>This response for this initial request contains the first byte of data received. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/time_to_first_byte\">Time to First Byte</a> (TTFB) is the time between when the user made the request — say by clicking on a link — and the receipt of this first packet of HTML. The first chunk of content is usually 14kb of data.</p>\n<blockquote>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#tcp_slow_start_14kb_rule\">TCP Slow Start / 14kb rule</a>- The first response packet will be 14Kb. This is part of <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TCP_slow_start\">TCP slow start</a>, an algorithm which balances the speed of a network connection. Slow start gradually increases the amount of data transmitted until the network’s maximum bandwidth can be determined.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*m1-2iLpBgV0BWO22ynHFDQ.png\"></figure><h4>5. Parsing</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parse\">Parsing</a> is the step the browser takes to turn the first chunk of data it receives over the network into the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/DOM\">DOM</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSSOM\">CSSOM</a>, which is used by the renderer to paint a page to the screen.</p>\n<p>It is important for the fist chunk of data(14kb) to include the html and css that the browser needs to render the page, even if the request page’s HTML is larger than the initial 14KB packet.</p>\n<h4>6. Building DOM Tree</h4>\n<p>The <strong>first step</strong> is processing the HTML markup and building the DOM tree.HTML parsing involves <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\">tokenization</a> and tree construction. HTML tokens include start and end tags, as well as attribute names and values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nf_ahouWeX91vCxOYSPdig.png\"></figure><p>When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but &lt;script&gt; tags—particularly those without an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async</a> or defer attribute—block rendering, and pause the parsing of HTML.</p>\n<blockquote>Preload Scanner- building of DOM occupies the main thread. As this happens, the <strong><em>preload scanner</em> </strong>will parse through the content available in the background and request high priority resources like CSS, JavaScript, and web fonts even before the HTML parser reaches requested assets, and they might already be in flight or downloaded.</blockquote>\n<h4>7. Building the CSSOM</h4>\n<p>The <strong>second step</strong> is processing CSS and building the CSSOM tree. The DOM and CSSOM are both trees. They are independent data structures. The browser converts the CSS rules into a map of styles it can understand and work with.</p>\n<h4>\n<strong>8. JavaScript Compilation (Building the </strong>Abstract Syntax Tree<strong>)</strong>\n</h4>\n<p>While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into abstract syntax trees. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.</p>\n<h4>9. Render</h4>\n<p>The <strong>third step</strong> in the critical rendering path is combining the DOM and CSSOM into a render tree.By default the rendering engine can display HTML and XML documents and images. It can display other types of data via plug-ins. Chrome uses Blink as the Rendering Engine.</p>\n<p><strong>Style : </strong>The computed style tree, or render tree, construction starts with the root of the DOM tree, traversing each visible node. The <strong>&lt;head&gt;</strong>, nodes with <strong>display: none</strong> are not included in the render DOM tree but the nodes with visibility: hidden are included as they do take up space.</p>\n<h4>10. Layout</h4>\n<p>The <strong>fourth step</strong> in the critical rendering path is running layout on the render tree to compute the geometry of each node. <em>Layout</em> is the process by which the width, height, and location of all the nodes in the render tree are determined, plus the determination of the size and position of each object on the page. <em>Reflow</em> is any subsequent size and position determination of any part of the page or the entire document.</p>\n<p>The first time the size and position of nodes are determined is called <strong><em>layout</em></strong>. Subsequent recalculations of node size and locations are called <strong><em>reflows</em></strong>. In our example, suppose the initial layout occurs before the image is returned. Since we didn’t declare the size of our image, there will be a reflow once the image size is known.</p>\n<h4>11. Painting</h4>\n<p>The last step in the critical rendering path is painting the individual nodes to the screen, the first occurrence of which is called the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/first_meaningful_paint\">first meaningful paint</a>. In the painting or rasterization phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.</p>\n<p>Painting can break the elements in the layout tree into layers. Promoting content into layers on the GPU (instead of the main thread on the CPU) improves paint and repaint performance. Properties and elements that instantiate a layer, — <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">&lt;video&gt;</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\">&lt;canvas&gt;</a>, element with property<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/opacity\">opacity</a>, a 3D <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\">transform</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\">will-change</a>, and a few others.</p>\n<p>Layers do improve performance, but are expensive when it comes to memory management,</p>\n<p><strong>12. Compositing</strong></p>\n<p>When sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.</p>\n<p>As the page continues to load assets, reflows can happen (recall our example image that arrived late). A reflow sparks a repaint and a re-composite.</p>\n<blockquote>This is a summarised content from <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work\">https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work</a> for self -learning.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5cd5d1b5c065\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "how-browser-works",
                "web-browser",
                "connection-setup"
            ]
        },
        {
            "title": "What is Encryption and data signing ?",
            "pubDate": "2022-03-13 15:36:37",
            "link": "https://eishta.medium.com/what-is-encryption-and-data-signing-b267e354ee06?source=rss-f300f3a4fbe7------2",
            "guid": "https://medium.com/p/b267e354ee06",
            "author": "Eishta Mittal",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*MrGM3COnUXXpdeEsEnG1iQ.png",
            "description": "\n<h3><strong>What is Encryption and data signing ?</strong></h3>\n<p><strong>What is Encryption?</strong></p>\n<p><strong>Encryption</strong> is the method by which information is converted into secret code that hides the information’s true meaning. In technical terms, it is the process of converting human-readable plaintext to incomprehensible text, also known as cipher-text so that only authorised parties can read the data.</p>\n<p>Encryption requires the use of a cryptographic key: a set of mathematical values that both the sender and the recipient of an encrypted message agree on. Data encryption works by securing transmitted digital data on the cloud and computer systems. There are two kinds of digital data, transmitted data or in-flight data and stored digital data or data at rest.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MrGM3COnUXXpdeEsEnG1iQ.png\"></figure><h4>Why is data encryption necessary?</h4>\n<p>Phone calls, emails, online purchases, social media, and general browsing are online activities we can no longer live without. While we’re constantly looking or sharing information online, our data is fundamentally stored somewhere. Most people aren’t sure where that “somewhere” is, but that data should only be available to the service provider brokering your conversation. It could, however, be visible to the telecom companies carrying your Internet packets, and your supposedly private and secure communications could be intercepted. As many cases have proven, user and company data is increasingly being targeted by hackers and cybercriminals resulting in data breaches and targeted attacks. This reason alone should serve as enough warning to those who haven’t considered protecting their communications via encryption.</p>\n<p>The main purpose for encrypting the data stored in your computer and devices — even if you have secure passwords — is to ensure your privacy, protect your data, and secure intellectual property. This is also known as endpoint encryption, which basically adds an extra layer of protection for the confidential information residing on your PC and devices.</p>\n<p><strong>Encryption works best if it is ubiquitous and automatic. It should be enabled for everything by default, not a feature you only turn on when you’re doing something you consider worth protecting. — “</strong>Bruce Schneier<strong>”</strong></p>\n<h4><strong>Why we need Encryption ?</strong></h4>\n<p><strong>Privacy:</strong> Encryption ensures that no one can read communications or data at rest except the intended recipient.</p>\n<p><strong>Security:</strong> Encryption helps prevent data breaches, whether the data is in transit or at rest.</p>\n<p><strong>Data integrity: </strong>When data is transmitted across the Internet, encryption (along with other integrity protections) ensures that what the recipient receives has not been tampered with on the way.</p>\n<h4>What are the different types of encryption?</h4>\n<p>There are two types of encryption :-</p>\n<ol>\n<li>Symmetric Key Encryption</li>\n<li>Asymmetric Key Encryption (also known as Public key encryption)</li>\n</ol>\n<h3>Symmetric encryption :</h3>\n<p>Symmetric encryption is a type of encryption where only one secret symmetric key is used to encrypt the plaintext and decrypt the cipher-text.</p>\n<ul>\n<li>\n<strong>Data Encryption Standards (DES)</strong>: DES is a low-level encryption block cipher algorithm that converts plain text in blocks of 64 bits and converts them to cipher-text using keys of 48 bits.</li>\n<li>\n<strong>Triple DES</strong>: Triple DES runs DES encryption three different times by encrypting, decrypting, and then encrypting data again.</li>\n<li><strong>Advanced Encryption Standard (AES)</strong></li>\n<li><strong>Twofish</strong></li>\n</ul>\n<h3>Asymmetric encryption methods:</h3>\n<p>Asymmetric encryption, also known as Public-Key Cryptography, encrypts and decrypts the data using two separate cryptographic asymmetric keys. These two keys are known as a “public key” and a “private key”.</p>\n<ul>\n<li>RSA</li>\n<li>Public key infrastructure (PKI)</li>\n</ul>\n<p>Going more into the details for Asymmetric Encryption:-</p>\n<p>In public key cryptography, <strong>every public key matches to only one private key.</strong> Together, they are used to encrypt and decrypt messages. If you encode a message using a person’s public key, they can only decode it using their matching private key.</p>\n<p>Here, the public and private keys are totally independent and cannot be derived from each other. If someone get to know the public key with which the message was encrypted, he cannot guess the private key to decrypt the message from the guessed public key.</p>\n<p>As everyone in the network hold a unique public-private key pair, there can be two ways in which we can perform the key exchange :-</p>\n<ol>\n<li>Sharing the public key</li>\n<li>Sharing the private key</li>\n</ol>\n<p>If we share our private key over the network, any third party access to the data will expose the private key and they will easily decrypt the message using the private key.</p>\n<p>The solution to this is sharing your public key over the network which anyone can use to encrypt the message they want to send you. Then you can use your private key to decrypt that message. If any third party gets to know the public key during the transit of the message, they wont be able to decrypt the message as it can be done only using the private key. As the private key cannot be derived using the public key, this method ensures the security of the exchanged data.</p>\n<h4>Public and private keys: an example</h4>\n<p>Bob wants to send Alice an encrypted email. To do this, Bob takes Alice’s public key and encrypts his message to her. Then, when Alice receives the message, she takes the private key that is known only to her in order to decrypt the message from Bob.<br><br>Although attackers might try to compromise the server and read the message, they will be unable to, because they lack the private key to decrypt the message. Only Alice will be able to decrypt the message as she is the only one with the private key. And, when Alice wants to reply, she simply repeats the process, encrypting her message to Bob using Bob’s public key.</p>\n<p>But there is loophole in this process. What if Mike gets a hold of Alice’s public key (since it’s public) and pretend that Bob is the person sending a message to Alice. For this, the solution is Digital signature.</p>\n<p><strong>Signing of data</strong> works to authenticate the sender of the data and ensures the data has not been altered in transit.</p>\n<p>For creating a digital signature, the user first creates a one-way hash of the message/document to be signed and this representation of the message in the form of a hash is called message digest. Now, the user uses his private key for encrypting the hash. The encrypted hash and other information like hashing algorithm used is the digital signature.</p>\n<h3>Steps to create digital signatures</h3>\n<p>These are the steps one should follow to create digital signatures:</p>\n<ol>\n<li>As described above, a message digest needs to be computed first. A message digest is computed by applying a hash function on the message/document to be sent. Popular hashing algorithms used for generating message digest are Secure Hash Algorithm-1 (SHA-1), Secure Hashing Algorithm-2 family (SHA-2, SHA-256) and Message Digest 5 (MD5).</li>\n<li>This message digest is encrypted using the private key of the sender for creating a digital signature.</li>\n<li>This digital signature is then transmitted with the original message to the receiver.</li>\n<li>When the recipient receives the message, they decrypt the digital signature using the public key of the sender.</li>\n<li>After decrypting the digital signature, the receiver now retrieves the message digest.</li>\n<li>Also, the receiver can easily tally the message digest from the received message.</li>\n<li>The message digest tallied by the receiver and the message digest received must be the same for ensuring message authentication, data integrity and non-repudiation.</li>\n</ol>\n<h4>Generating Digital Signature in Node.js</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JbFqliZjxpjIwBuVS5BYSA.png\"></figure><p>However, signing alone does not ensure the data has not been intercepted and read.</p>\n<p><strong>Confidentiality and integrity</strong> are reached when data is encrypted asymmetrically, as only the intended recipient can decrypt the message. <strong>Non-repudiation and authenticity</strong> occur due to digital signing. Non-repudiation means that using the technique of digital signing, the sender of any information cannot, in the future, say they did not send the data, as the use of their private key confirms that they sent the data.</p>\n<h3>Sources:-</h3>\n<p><a href=\"https://www.ibm.com/in-en/topics/encryption\">https://www.ibm.com/in-en/topics/encryption</a></p>\n<p><a href=\"https://www.encryptionconsulting.com/education-center/encryption-and-signing/\">https://www.encryptionconsulting.com/education-center/encryption-and-signing/</a></p>\n<p><a href=\"https://www.preveil.com/blog/public-and-private-key/\">https://www.preveil.com/blog/public-and-private-key/</a></p>\n<p><a href=\"https://www.cloudflare.com/en-in/learning/ssl/what-is-encryption/\">https://www.cloudflare.com/en-in/learning/ssl/what-is-encryption/</a></p>\n<p><a href=\"https://resources.infosecinstitute.com/topic/role-of-digital-signatures-in-asymmetric-cryptography/\">https://resources.infosecinstitute.com/topic/role-of-digital-signatures-in-asymmetric-cryptography/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b267e354ee06\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<h3><strong>What is Encryption and data signing ?</strong></h3>\n<p><strong>What is Encryption?</strong></p>\n<p><strong>Encryption</strong> is the method by which information is converted into secret code that hides the information’s true meaning. In technical terms, it is the process of converting human-readable plaintext to incomprehensible text, also known as cipher-text so that only authorised parties can read the data.</p>\n<p>Encryption requires the use of a cryptographic key: a set of mathematical values that both the sender and the recipient of an encrypted message agree on. Data encryption works by securing transmitted digital data on the cloud and computer systems. There are two kinds of digital data, transmitted data or in-flight data and stored digital data or data at rest.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MrGM3COnUXXpdeEsEnG1iQ.png\"></figure><h4>Why is data encryption necessary?</h4>\n<p>Phone calls, emails, online purchases, social media, and general browsing are online activities we can no longer live without. While we’re constantly looking or sharing information online, our data is fundamentally stored somewhere. Most people aren’t sure where that “somewhere” is, but that data should only be available to the service provider brokering your conversation. It could, however, be visible to the telecom companies carrying your Internet packets, and your supposedly private and secure communications could be intercepted. As many cases have proven, user and company data is increasingly being targeted by hackers and cybercriminals resulting in data breaches and targeted attacks. This reason alone should serve as enough warning to those who haven’t considered protecting their communications via encryption.</p>\n<p>The main purpose for encrypting the data stored in your computer and devices — even if you have secure passwords — is to ensure your privacy, protect your data, and secure intellectual property. This is also known as endpoint encryption, which basically adds an extra layer of protection for the confidential information residing on your PC and devices.</p>\n<p><strong>Encryption works best if it is ubiquitous and automatic. It should be enabled for everything by default, not a feature you only turn on when you’re doing something you consider worth protecting. — “</strong>Bruce Schneier<strong>”</strong></p>\n<h4><strong>Why we need Encryption ?</strong></h4>\n<p><strong>Privacy:</strong> Encryption ensures that no one can read communications or data at rest except the intended recipient.</p>\n<p><strong>Security:</strong> Encryption helps prevent data breaches, whether the data is in transit or at rest.</p>\n<p><strong>Data integrity: </strong>When data is transmitted across the Internet, encryption (along with other integrity protections) ensures that what the recipient receives has not been tampered with on the way.</p>\n<h4>What are the different types of encryption?</h4>\n<p>There are two types of encryption :-</p>\n<ol>\n<li>Symmetric Key Encryption</li>\n<li>Asymmetric Key Encryption (also known as Public key encryption)</li>\n</ol>\n<h3>Symmetric encryption :</h3>\n<p>Symmetric encryption is a type of encryption where only one secret symmetric key is used to encrypt the plaintext and decrypt the cipher-text.</p>\n<ul>\n<li>\n<strong>Data Encryption Standards (DES)</strong>: DES is a low-level encryption block cipher algorithm that converts plain text in blocks of 64 bits and converts them to cipher-text using keys of 48 bits.</li>\n<li>\n<strong>Triple DES</strong>: Triple DES runs DES encryption three different times by encrypting, decrypting, and then encrypting data again.</li>\n<li><strong>Advanced Encryption Standard (AES)</strong></li>\n<li><strong>Twofish</strong></li>\n</ul>\n<h3>Asymmetric encryption methods:</h3>\n<p>Asymmetric encryption, also known as Public-Key Cryptography, encrypts and decrypts the data using two separate cryptographic asymmetric keys. These two keys are known as a “public key” and a “private key”.</p>\n<ul>\n<li>RSA</li>\n<li>Public key infrastructure (PKI)</li>\n</ul>\n<p>Going more into the details for Asymmetric Encryption:-</p>\n<p>In public key cryptography, <strong>every public key matches to only one private key.</strong> Together, they are used to encrypt and decrypt messages. If you encode a message using a person’s public key, they can only decode it using their matching private key.</p>\n<p>Here, the public and private keys are totally independent and cannot be derived from each other. If someone get to know the public key with which the message was encrypted, he cannot guess the private key to decrypt the message from the guessed public key.</p>\n<p>As everyone in the network hold a unique public-private key pair, there can be two ways in which we can perform the key exchange :-</p>\n<ol>\n<li>Sharing the public key</li>\n<li>Sharing the private key</li>\n</ol>\n<p>If we share our private key over the network, any third party access to the data will expose the private key and they will easily decrypt the message using the private key.</p>\n<p>The solution to this is sharing your public key over the network which anyone can use to encrypt the message they want to send you. Then you can use your private key to decrypt that message. If any third party gets to know the public key during the transit of the message, they wont be able to decrypt the message as it can be done only using the private key. As the private key cannot be derived using the public key, this method ensures the security of the exchanged data.</p>\n<h4>Public and private keys: an example</h4>\n<p>Bob wants to send Alice an encrypted email. To do this, Bob takes Alice’s public key and encrypts his message to her. Then, when Alice receives the message, she takes the private key that is known only to her in order to decrypt the message from Bob.<br><br>Although attackers might try to compromise the server and read the message, they will be unable to, because they lack the private key to decrypt the message. Only Alice will be able to decrypt the message as she is the only one with the private key. And, when Alice wants to reply, she simply repeats the process, encrypting her message to Bob using Bob’s public key.</p>\n<p>But there is loophole in this process. What if Mike gets a hold of Alice’s public key (since it’s public) and pretend that Bob is the person sending a message to Alice. For this, the solution is Digital signature.</p>\n<p><strong>Signing of data</strong> works to authenticate the sender of the data and ensures the data has not been altered in transit.</p>\n<p>For creating a digital signature, the user first creates a one-way hash of the message/document to be signed and this representation of the message in the form of a hash is called message digest. Now, the user uses his private key for encrypting the hash. The encrypted hash and other information like hashing algorithm used is the digital signature.</p>\n<h3>Steps to create digital signatures</h3>\n<p>These are the steps one should follow to create digital signatures:</p>\n<ol>\n<li>As described above, a message digest needs to be computed first. A message digest is computed by applying a hash function on the message/document to be sent. Popular hashing algorithms used for generating message digest are Secure Hash Algorithm-1 (SHA-1), Secure Hashing Algorithm-2 family (SHA-2, SHA-256) and Message Digest 5 (MD5).</li>\n<li>This message digest is encrypted using the private key of the sender for creating a digital signature.</li>\n<li>This digital signature is then transmitted with the original message to the receiver.</li>\n<li>When the recipient receives the message, they decrypt the digital signature using the public key of the sender.</li>\n<li>After decrypting the digital signature, the receiver now retrieves the message digest.</li>\n<li>Also, the receiver can easily tally the message digest from the received message.</li>\n<li>The message digest tallied by the receiver and the message digest received must be the same for ensuring message authentication, data integrity and non-repudiation.</li>\n</ol>\n<h4>Generating Digital Signature in Node.js</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JbFqliZjxpjIwBuVS5BYSA.png\"></figure><p>However, signing alone does not ensure the data has not been intercepted and read.</p>\n<p><strong>Confidentiality and integrity</strong> are reached when data is encrypted asymmetrically, as only the intended recipient can decrypt the message. <strong>Non-repudiation and authenticity</strong> occur due to digital signing. Non-repudiation means that using the technique of digital signing, the sender of any information cannot, in the future, say they did not send the data, as the use of their private key confirms that they sent the data.</p>\n<h3>Sources:-</h3>\n<p><a href=\"https://www.ibm.com/in-en/topics/encryption\">https://www.ibm.com/in-en/topics/encryption</a></p>\n<p><a href=\"https://www.encryptionconsulting.com/education-center/encryption-and-signing/\">https://www.encryptionconsulting.com/education-center/encryption-and-signing/</a></p>\n<p><a href=\"https://www.preveil.com/blog/public-and-private-key/\">https://www.preveil.com/blog/public-and-private-key/</a></p>\n<p><a href=\"https://www.cloudflare.com/en-in/learning/ssl/what-is-encryption/\">https://www.cloudflare.com/en-in/learning/ssl/what-is-encryption/</a></p>\n<p><a href=\"https://resources.infosecinstitute.com/topic/role-of-digital-signatures-in-asymmetric-cryptography/\">https://resources.infosecinstitute.com/topic/role-of-digital-signatures-in-asymmetric-cryptography/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b267e354ee06\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "security",
                "private-key",
                "digital-signatures",
                "encryption",
                "public-key"
            ]
        },
        {
            "title": "How I started my learning journey after 3 years of working experience?",
            "pubDate": "2021-08-26 06:31:58",
            "link": "https://eishta.medium.com/how-i-started-my-learning-journey-after-3-years-of-working-experience-b237dc08dade?source=rss-f300f3a4fbe7------2",
            "guid": "https://medium.com/p/b237dc08dade",
            "author": "Eishta Mittal",
            "thumbnail": "https://cdn-images-1.medium.com/max/910/1*t2vHXbJiHLM-hffCX46-Qw.jpeg",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/910/1*t2vHXbJiHLM-hffCX46-Qw.jpeg\"><figcaption>“For the things we have to learn before we can do them, we learn by doing them.”<br>― Aristotle</figcaption></figure><p>From being one of the best tech students to being a person who couldn’t face logical coding, today I start my journey to code again.</p>\n<p>There was a time when I was able to solve any problem on any platform and didn’t find any need to practice. I used to think, if I am able to solve any of these problems, and able to clear any question in the interview, why do I need to practice. Slowly, the time passed and I joined my first organisation after college .With time how the logical coding turned into just copy-pasting the existing code, I lost my confidence and the ability to think the solutions to the coding questions. Even a small factorial program scared me.</p>\n<p>Then I decided to switch the first company and had to work around a lot as the technology I was working on was not something I wanted to continue with. I decided to go for React. I found it interesting and I don't know why I connected more to it. In my mind, I always knew that running away is not a solution. I have to face this one day when I need to change the company .<br>Credit goes to my Product lead who pushed me in many ways to go deep in the concepts. I started questioning things . There was always a question ,why?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/304/1*rR7lJa9mMV-vG8r2JzmdLQ.jpeg\"><figcaption>Of course , you CAN</figcaption></figure><p>I remember, I was asking some doubts to my lead .To one of his questions , I answered ‘window object’. He was so happy to know that I am actually going deep in the concepts. However, it was the most basic question, but the feeling of taking the first step was the reason to be happy.</p>\n<p>Again I started losing the connect with studies and along with that my confidence. This all depressed me and the effects started showing. I started running from problems again.<br>Then the LOCKDOWN came into our lives. The most important time of my life maybe, when I connected to myself. I figured out that there is no other way to fight with the fear of coding other than practicing consistently. I used to build projects on my own till night and wake up early for the same, doing the office work in the day. Every time I faced rejections, I came back stronger. There was a time when I was clearing every interview.</p>\n<p>And ‘<strong><em>Hard work Beats Talent</em></strong>’ is what I realised in this time. I started in March 2020 again and ended with a good job offer in my hand in September 2020 , along with offers from 6 other companies.</p>\n<p>You might have skills but hard work is what that keeps you going in long run.<br>Failure or rejections might disappoint you but you should see them as a chance to improve. You get to know where you lack and work on that. Sometimes we need these rejections to get started in our never ending learning journey!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b237dc08dade\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/910/1*t2vHXbJiHLM-hffCX46-Qw.jpeg\"><figcaption>“For the things we have to learn before we can do them, we learn by doing them.”<br>― Aristotle</figcaption></figure><p>From being one of the best tech students to being a person who couldn’t face logical coding, today I start my journey to code again.</p>\n<p>There was a time when I was able to solve any problem on any platform and didn’t find any need to practice. I used to think, if I am able to solve any of these problems, and able to clear any question in the interview, why do I need to practice. Slowly, the time passed and I joined my first organisation after college .With time how the logical coding turned into just copy-pasting the existing code, I lost my confidence and the ability to think the solutions to the coding questions. Even a small factorial program scared me.</p>\n<p>Then I decided to switch the first company and had to work around a lot as the technology I was working on was not something I wanted to continue with. I decided to go for React. I found it interesting and I don't know why I connected more to it. In my mind, I always knew that running away is not a solution. I have to face this one day when I need to change the company .<br>Credit goes to my Product lead who pushed me in many ways to go deep in the concepts. I started questioning things . There was always a question ,why?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/304/1*rR7lJa9mMV-vG8r2JzmdLQ.jpeg\"><figcaption>Of course , you CAN</figcaption></figure><p>I remember, I was asking some doubts to my lead .To one of his questions , I answered ‘window object’. He was so happy to know that I am actually going deep in the concepts. However, it was the most basic question, but the feeling of taking the first step was the reason to be happy.</p>\n<p>Again I started losing the connect with studies and along with that my confidence. This all depressed me and the effects started showing. I started running from problems again.<br>Then the LOCKDOWN came into our lives. The most important time of my life maybe, when I connected to myself. I figured out that there is no other way to fight with the fear of coding other than practicing consistently. I used to build projects on my own till night and wake up early for the same, doing the office work in the day. Every time I faced rejections, I came back stronger. There was a time when I was clearing every interview.</p>\n<p>And ‘<strong><em>Hard work Beats Talent</em></strong>’ is what I realised in this time. I started in March 2020 again and ended with a good job offer in my hand in September 2020 , along with offers from 6 other companies.</p>\n<p>You might have skills but hard work is what that keeps you going in long run.<br>Failure or rejections might disappoint you but you should see them as a chance to improve. You get to know where you lack and work on that. Sometimes we need these rejections to get started in our never ending learning journey!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b237dc08dade\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "learning",
                "coders",
                "never-give-up",
                "development",
                "start-now"
            ]
        }
    ]
}